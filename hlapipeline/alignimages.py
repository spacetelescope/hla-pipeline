#!/usr/bin/env python

"""This script is a modernized replacement of tweakreg.

"""

import argparse
from astropy.io import fits
from astropy.table import Table
import pdb
from stwcs.wcsutil import HSTWCS
import sys
from utils import astrometric_utils as amutils

# Module-level dictionary contains instrument/detector-specific parameters used later on in the script.
detector_specific_params = {"acs":
                                {"hrc":
                                     {"fwhmpsf":0.073}, # TODO: Verify value
                                 "sbc":
                                     {"fwhmpsf":0.065}, # TODO: Verify value
                                 "wfc":
                                     {"fwhmpsf":0.076}}, # TODO: Verify value
                            "wfc3":
                                {"ir":{
                                    "fwhmpsf":0.14}, # TODO: nothing. pipeline value in agreement with instrument handbook value.
                                 "uvis":{
                                     "fwhmpsf":0.076}}} # TODO: nothing. pipeline value in agreement with instrument handbook value.
#-----------------------------------------------------------------------------------------------------------------------
def main(input_list):
    """Main calling function.
    
    Parameters
    ----------
    input_list: list
        List of one or more input image(s) and/or association file(s) to align.

    Returns
    -------
    Nothing for now.

    """

    # 1: Interpret input data and optional parameters

    # 2: Apply filter to input observations to insure that they meet minimum criteria for being able to be aligned
    imgList = input_list
    # 3: Build WCS for full set of input observations
    refwcs = amutils.build_reference_wcs(imgList)

    # 4: Retrieve list of astrometric sources from database

    # 5: Extract catalog of observable sources from each input image
    extracted_sources = generate_source_catalogs(imgList,refwcs)

    # 6: Cross-match source catalog with astrometric reference source catalog

    # 7: Perform fit between source catalog and reference catalog
#-----------------------------------------------------------------------------------------------------------------------
def generate_source_catalogs(imgList,refwcs,**pars):
    """Generates a dictionary of source catalogs keyed by image name.

    Parameters
    ----------
    imgList: list
        List of one or more calibrated fits images that will be used for source detection.
    refwcs: astropy WCS object
        Composite WCS information generated by build_reference_wcs() for the full set of input images.

    Returns
    -------
    sourceCatalogDict: dictionary
        a dictionary (keyed by image name) of two element dictionaries which in tern contain 1) a dictionary of the
        detector-specific processing parameters and 2) an astropy table of position and photometry information of all
        detected sources
    """
    sourceCatalogDict = {}

    for imgName in imgList:
        print("Image name:           ", imgName)

        sourceCatalogDict[imgName] = {}

        # open image
        imgHDU = fits.open(imgName)
        imgPrimaryHeader = imgHDU[0].header
        instrument = imgPrimaryHeader['INSTRUME'].lower()
        detector = imgPrimaryHeader['DETECTOR'].lower()

        # get instrument/detector-specific image alignment parameters
        sourceCatalogDict[imgName]["params"] = detector_specific_params[instrument][detector]

        # Identify sources in image, convert coords from chip x, y form to reference WCS sky RA, Dec form.
        imgwcs = HSTWCS(imgHDU, 1)
        fwhmpsf_pix = sourceCatalogDict[imgName]["params"]['fwhmpsf']/imgwcs.pscale
        sourceCatalogDict[imgName]["catalog_table"] = amutils.generate_source_catalog(imgHDU,refwcs,threshold = 1000,fwhm = fwhmpsf_pix)

        # write out coord lists to files for diagnostic purposes. Protip: To display the sources in these files in DS9,
        # set the "Coordinate System" option to "Physical" when loading the region file.
        regfilename = imgName[0:9]+".reg"
        out_table = Table(sourceCatalogDict[imgName]["catalog_table"])
        out_table.write(regfilename, include_names=["xcentroid", "ycentroid"], format="ascii.basic")
        print("Wrote region file {}\n".format(regfilename))
        imgHDU.close()
    return(sourceCatalogDict)
#=======================================================================================================================
if __name__ == '__main__':
    PARSER = argparse.ArgumentParser(description='Align images')
    PARSER.add_argument('raw_input_list', nargs='+', help='A space-separated list of fits files to align, or a simple text '
                                                     'file containing a list of fits files to align, one per line')
    ARGS = PARSER.parse_args()

    # Build list of input images
    input_list=[]
    for item in ARGS.raw_input_list:
        if item.endswith(".fits"):
            if item.endswith("asn.fits"):
                sys.exit("ADD SUPPORT FOR ASN FILES!") #TODO: Add support for asn.fits files
            else:
                input_list.append(item)
        else:
            with open(item,'r') as infile:
                fileLines = infile.readlines()
            for fileLine in fileLines:
                input_list.append(fileLine.strip())

    # Get to it!
    main(input_list)
